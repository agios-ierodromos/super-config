name: "Publish Release"

# The workflow below runs when the release event triggers with a Pull Request is closed and merged.
# For more information on the release event.
# See: [Events that trigger workflows](https://docs.github.com/en/actions/reference/events-that-trigger-workflows#pull_request)
# See: https://localheinz.com/articles/2022/01/24/creating-releases-with-github-actions/

on: 
  pull_request:
    types:
      - closed

jobs:
  release-linux:
    # The the release job will only run if the pull request was also merged
    if: github.event.pull_request.merged == true
    name: "Create release"
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write
      pull-requests: write

    steps:

      # See: https://github.com/marketplace/actions/checkout
      - name: "Checkout repository"
        id: checkout_repository
        uses: actions/checkout@v3

      # See: https://github.com/marketplace/actions/github-script
      - name: "Removiong the release for the 'latest' tag"
        uses: "actions/github-script@v6"
        with:
          script: |
            try {
              const { repo: { owner, repo } } = context;
              const tag = "latest";

              const existing = await github.rest.repos.getReleaseByTag({
                owner,
                repo,
                tag,
              });

              if (existing.status === 200) {
                await github.rest.repos.deleteRelease({
                  owner,
                  repo,
                  release_id: existing.data.id,
                });

                core.notice('The "latest" release is removed.');
              } else {
                core.warning('No "latest" release to remove.');
              }
            } catch (error) {
              core.setFailed(error.message);
            }

      # See: https://github.com/marketplace/actions/get-json-property
      - name: "Read version from release.json"
        uses: notiz-dev/github-action-json-property@release
        id: package_version
        with:
          path: "release.json"
          prop_path: "version"

      # See: https://github.com/marketplace/actions/github-script
      - name: "Create release"
        uses: "actions/github-script@v6"
        with:
          script: |
            try {
              const { repo: { owner, repo } } = context;
              const tag = "v${{ steps.package_version.outputs.prop }}";

              await github.rest.repos.createRelease({
                owner,
                repo,
                name: tag,
                tag_name: tag,
                draft: true,
                generate_release_notes: true,
                make_latest: "true",
                prerelease: false,
              });

              core.notice('The "' tag + '"" release is created as draft.');
            } catch (error) {
              core.setFailed(error.message);
            }
